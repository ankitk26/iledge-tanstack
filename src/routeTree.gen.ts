/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createServerRootRoute } from '@tanstack/react-start/server'

import { Route as rootRouteImport } from './routes/__root'
import { Route as LoginRouteImport } from './routes/login'
import { Route as ProtectedRouteImport } from './routes/_protected'
import { Route as ProtectedIndexRouteImport } from './routes/_protected.index'
import { Route as ProtectedSearchRouteImport } from './routes/_protected.search'
import { Route as ProtectedInsightsRouteImport } from './routes/_protected.insights'
import { Route as ProtectedExpensesRouteImport } from './routes/_protected.expenses'
import { Route as ProtectedAdminRouteImport } from './routes/_protected.admin'
import { Route as ProtectedPayeesPayeeIdRouteImport } from './routes/_protected.payees.$payeeId'
import { ServerRoute as ApiAuthSplatServerRouteImport } from './routes/api/auth/$'

const rootServerRouteImport = createServerRootRoute()

const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const ProtectedRoute = ProtectedRouteImport.update({
  id: '/_protected',
  getParentRoute: () => rootRouteImport,
} as any)
const ProtectedIndexRoute = ProtectedIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => ProtectedRoute,
} as any)
const ProtectedSearchRoute = ProtectedSearchRouteImport.update({
  id: '/search',
  path: '/search',
  getParentRoute: () => ProtectedRoute,
} as any)
const ProtectedInsightsRoute = ProtectedInsightsRouteImport.update({
  id: '/insights',
  path: '/insights',
  getParentRoute: () => ProtectedRoute,
} as any)
const ProtectedExpensesRoute = ProtectedExpensesRouteImport.update({
  id: '/expenses',
  path: '/expenses',
  getParentRoute: () => ProtectedRoute,
} as any)
const ProtectedAdminRoute = ProtectedAdminRouteImport.update({
  id: '/admin',
  path: '/admin',
  getParentRoute: () => ProtectedRoute,
} as any)
const ProtectedPayeesPayeeIdRoute = ProtectedPayeesPayeeIdRouteImport.update({
  id: '/payees/$payeeId',
  path: '/payees/$payeeId',
  getParentRoute: () => ProtectedRoute,
} as any)
const ApiAuthSplatServerRoute = ApiAuthSplatServerRouteImport.update({
  id: '/api/auth/$',
  path: '/api/auth/$',
  getParentRoute: () => rootServerRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/login': typeof LoginRoute
  '/admin': typeof ProtectedAdminRoute
  '/expenses': typeof ProtectedExpensesRoute
  '/insights': typeof ProtectedInsightsRoute
  '/search': typeof ProtectedSearchRoute
  '/': typeof ProtectedIndexRoute
  '/payees/$payeeId': typeof ProtectedPayeesPayeeIdRoute
}
export interface FileRoutesByTo {
  '/login': typeof LoginRoute
  '/admin': typeof ProtectedAdminRoute
  '/expenses': typeof ProtectedExpensesRoute
  '/insights': typeof ProtectedInsightsRoute
  '/search': typeof ProtectedSearchRoute
  '/': typeof ProtectedIndexRoute
  '/payees/$payeeId': typeof ProtectedPayeesPayeeIdRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_protected': typeof ProtectedRouteWithChildren
  '/login': typeof LoginRoute
  '/_protected/admin': typeof ProtectedAdminRoute
  '/_protected/expenses': typeof ProtectedExpensesRoute
  '/_protected/insights': typeof ProtectedInsightsRoute
  '/_protected/search': typeof ProtectedSearchRoute
  '/_protected/': typeof ProtectedIndexRoute
  '/_protected/payees/$payeeId': typeof ProtectedPayeesPayeeIdRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/login'
    | '/admin'
    | '/expenses'
    | '/insights'
    | '/search'
    | '/'
    | '/payees/$payeeId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/login'
    | '/admin'
    | '/expenses'
    | '/insights'
    | '/search'
    | '/'
    | '/payees/$payeeId'
  id:
    | '__root__'
    | '/_protected'
    | '/login'
    | '/_protected/admin'
    | '/_protected/expenses'
    | '/_protected/insights'
    | '/_protected/search'
    | '/_protected/'
    | '/_protected/payees/$payeeId'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  ProtectedRoute: typeof ProtectedRouteWithChildren
  LoginRoute: typeof LoginRoute
}
export interface FileServerRoutesByFullPath {
  '/api/auth/$': typeof ApiAuthSplatServerRoute
}
export interface FileServerRoutesByTo {
  '/api/auth/$': typeof ApiAuthSplatServerRoute
}
export interface FileServerRoutesById {
  __root__: typeof rootServerRouteImport
  '/api/auth/$': typeof ApiAuthSplatServerRoute
}
export interface FileServerRouteTypes {
  fileServerRoutesByFullPath: FileServerRoutesByFullPath
  fullPaths: '/api/auth/$'
  fileServerRoutesByTo: FileServerRoutesByTo
  to: '/api/auth/$'
  id: '__root__' | '/api/auth/$'
  fileServerRoutesById: FileServerRoutesById
}
export interface RootServerRouteChildren {
  ApiAuthSplatServerRoute: typeof ApiAuthSplatServerRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_protected': {
      id: '/_protected'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof ProtectedRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_protected/': {
      id: '/_protected/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof ProtectedIndexRouteImport
      parentRoute: typeof ProtectedRoute
    }
    '/_protected/search': {
      id: '/_protected/search'
      path: '/search'
      fullPath: '/search'
      preLoaderRoute: typeof ProtectedSearchRouteImport
      parentRoute: typeof ProtectedRoute
    }
    '/_protected/insights': {
      id: '/_protected/insights'
      path: '/insights'
      fullPath: '/insights'
      preLoaderRoute: typeof ProtectedInsightsRouteImport
      parentRoute: typeof ProtectedRoute
    }
    '/_protected/expenses': {
      id: '/_protected/expenses'
      path: '/expenses'
      fullPath: '/expenses'
      preLoaderRoute: typeof ProtectedExpensesRouteImport
      parentRoute: typeof ProtectedRoute
    }
    '/_protected/admin': {
      id: '/_protected/admin'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof ProtectedAdminRouteImport
      parentRoute: typeof ProtectedRoute
    }
    '/_protected/payees/$payeeId': {
      id: '/_protected/payees/$payeeId'
      path: '/payees/$payeeId'
      fullPath: '/payees/$payeeId'
      preLoaderRoute: typeof ProtectedPayeesPayeeIdRouteImport
      parentRoute: typeof ProtectedRoute
    }
  }
}
declare module '@tanstack/react-start/server' {
  interface ServerFileRoutesByPath {
    '/api/auth/$': {
      id: '/api/auth/$'
      path: '/api/auth/$'
      fullPath: '/api/auth/$'
      preLoaderRoute: typeof ApiAuthSplatServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
  }
}

interface ProtectedRouteChildren {
  ProtectedAdminRoute: typeof ProtectedAdminRoute
  ProtectedExpensesRoute: typeof ProtectedExpensesRoute
  ProtectedInsightsRoute: typeof ProtectedInsightsRoute
  ProtectedSearchRoute: typeof ProtectedSearchRoute
  ProtectedIndexRoute: typeof ProtectedIndexRoute
  ProtectedPayeesPayeeIdRoute: typeof ProtectedPayeesPayeeIdRoute
}

const ProtectedRouteChildren: ProtectedRouteChildren = {
  ProtectedAdminRoute: ProtectedAdminRoute,
  ProtectedExpensesRoute: ProtectedExpensesRoute,
  ProtectedInsightsRoute: ProtectedInsightsRoute,
  ProtectedSearchRoute: ProtectedSearchRoute,
  ProtectedIndexRoute: ProtectedIndexRoute,
  ProtectedPayeesPayeeIdRoute: ProtectedPayeesPayeeIdRoute,
}

const ProtectedRouteWithChildren = ProtectedRoute._addFileChildren(
  ProtectedRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  ProtectedRoute: ProtectedRouteWithChildren,
  LoginRoute: LoginRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
const rootServerRouteChildren: RootServerRouteChildren = {
  ApiAuthSplatServerRoute: ApiAuthSplatServerRoute,
}
export const serverRouteTree = rootServerRouteImport
  ._addFileChildren(rootServerRouteChildren)
  ._addFileTypes<FileServerRouteTypes>()
