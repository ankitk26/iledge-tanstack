/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as LoginImport } from './routes/login'
import { Route as ProtectedImport } from './routes/_protected'
import { Route as ProtectedIndexImport } from './routes/_protected.index'
import { Route as ProtectedTestImport } from './routes/_protected.test'
import { Route as ProtectedSearchImport } from './routes/_protected.search'
import { Route as ProtectedInsightsImport } from './routes/_protected.insights'
import { Route as ProtectedExpensesImport } from './routes/_protected.expenses'
import { Route as ProtectedAdminImport } from './routes/_protected.admin'
import { Route as ProtectedPayeesPayeeIdImport } from './routes/_protected.payees.$payeeId'

// Create/Update Routes

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const ProtectedRoute = ProtectedImport.update({
  id: '/_protected',
  getParentRoute: () => rootRoute,
} as any)

const ProtectedIndexRoute = ProtectedIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => ProtectedRoute,
} as any)

const ProtectedTestRoute = ProtectedTestImport.update({
  id: '/test',
  path: '/test',
  getParentRoute: () => ProtectedRoute,
} as any)

const ProtectedSearchRoute = ProtectedSearchImport.update({
  id: '/search',
  path: '/search',
  getParentRoute: () => ProtectedRoute,
} as any)

const ProtectedInsightsRoute = ProtectedInsightsImport.update({
  id: '/insights',
  path: '/insights',
  getParentRoute: () => ProtectedRoute,
} as any)

const ProtectedExpensesRoute = ProtectedExpensesImport.update({
  id: '/expenses',
  path: '/expenses',
  getParentRoute: () => ProtectedRoute,
} as any)

const ProtectedAdminRoute = ProtectedAdminImport.update({
  id: '/admin',
  path: '/admin',
  getParentRoute: () => ProtectedRoute,
} as any)

const ProtectedPayeesPayeeIdRoute = ProtectedPayeesPayeeIdImport.update({
  id: '/payees/$payeeId',
  path: '/payees/$payeeId',
  getParentRoute: () => ProtectedRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_protected': {
      id: '/_protected'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof ProtectedImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/_protected/admin': {
      id: '/_protected/admin'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof ProtectedAdminImport
      parentRoute: typeof ProtectedImport
    }
    '/_protected/expenses': {
      id: '/_protected/expenses'
      path: '/expenses'
      fullPath: '/expenses'
      preLoaderRoute: typeof ProtectedExpensesImport
      parentRoute: typeof ProtectedImport
    }
    '/_protected/insights': {
      id: '/_protected/insights'
      path: '/insights'
      fullPath: '/insights'
      preLoaderRoute: typeof ProtectedInsightsImport
      parentRoute: typeof ProtectedImport
    }
    '/_protected/search': {
      id: '/_protected/search'
      path: '/search'
      fullPath: '/search'
      preLoaderRoute: typeof ProtectedSearchImport
      parentRoute: typeof ProtectedImport
    }
    '/_protected/test': {
      id: '/_protected/test'
      path: '/test'
      fullPath: '/test'
      preLoaderRoute: typeof ProtectedTestImport
      parentRoute: typeof ProtectedImport
    }
    '/_protected/': {
      id: '/_protected/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof ProtectedIndexImport
      parentRoute: typeof ProtectedImport
    }
    '/_protected/payees/$payeeId': {
      id: '/_protected/payees/$payeeId'
      path: '/payees/$payeeId'
      fullPath: '/payees/$payeeId'
      preLoaderRoute: typeof ProtectedPayeesPayeeIdImport
      parentRoute: typeof ProtectedImport
    }
  }
}

// Create and export the route tree

interface ProtectedRouteChildren {
  ProtectedAdminRoute: typeof ProtectedAdminRoute
  ProtectedExpensesRoute: typeof ProtectedExpensesRoute
  ProtectedInsightsRoute: typeof ProtectedInsightsRoute
  ProtectedSearchRoute: typeof ProtectedSearchRoute
  ProtectedTestRoute: typeof ProtectedTestRoute
  ProtectedIndexRoute: typeof ProtectedIndexRoute
  ProtectedPayeesPayeeIdRoute: typeof ProtectedPayeesPayeeIdRoute
}

const ProtectedRouteChildren: ProtectedRouteChildren = {
  ProtectedAdminRoute: ProtectedAdminRoute,
  ProtectedExpensesRoute: ProtectedExpensesRoute,
  ProtectedInsightsRoute: ProtectedInsightsRoute,
  ProtectedSearchRoute: ProtectedSearchRoute,
  ProtectedTestRoute: ProtectedTestRoute,
  ProtectedIndexRoute: ProtectedIndexRoute,
  ProtectedPayeesPayeeIdRoute: ProtectedPayeesPayeeIdRoute,
}

const ProtectedRouteWithChildren = ProtectedRoute._addFileChildren(
  ProtectedRouteChildren,
)

export interface FileRoutesByFullPath {
  '': typeof ProtectedRouteWithChildren
  '/login': typeof LoginRoute
  '/admin': typeof ProtectedAdminRoute
  '/expenses': typeof ProtectedExpensesRoute
  '/insights': typeof ProtectedInsightsRoute
  '/search': typeof ProtectedSearchRoute
  '/test': typeof ProtectedTestRoute
  '/': typeof ProtectedIndexRoute
  '/payees/$payeeId': typeof ProtectedPayeesPayeeIdRoute
}

export interface FileRoutesByTo {
  '/login': typeof LoginRoute
  '/admin': typeof ProtectedAdminRoute
  '/expenses': typeof ProtectedExpensesRoute
  '/insights': typeof ProtectedInsightsRoute
  '/search': typeof ProtectedSearchRoute
  '/test': typeof ProtectedTestRoute
  '/': typeof ProtectedIndexRoute
  '/payees/$payeeId': typeof ProtectedPayeesPayeeIdRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_protected': typeof ProtectedRouteWithChildren
  '/login': typeof LoginRoute
  '/_protected/admin': typeof ProtectedAdminRoute
  '/_protected/expenses': typeof ProtectedExpensesRoute
  '/_protected/insights': typeof ProtectedInsightsRoute
  '/_protected/search': typeof ProtectedSearchRoute
  '/_protected/test': typeof ProtectedTestRoute
  '/_protected/': typeof ProtectedIndexRoute
  '/_protected/payees/$payeeId': typeof ProtectedPayeesPayeeIdRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | ''
    | '/login'
    | '/admin'
    | '/expenses'
    | '/insights'
    | '/search'
    | '/test'
    | '/'
    | '/payees/$payeeId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/login'
    | '/admin'
    | '/expenses'
    | '/insights'
    | '/search'
    | '/test'
    | '/'
    | '/payees/$payeeId'
  id:
    | '__root__'
    | '/_protected'
    | '/login'
    | '/_protected/admin'
    | '/_protected/expenses'
    | '/_protected/insights'
    | '/_protected/search'
    | '/_protected/test'
    | '/_protected/'
    | '/_protected/payees/$payeeId'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  ProtectedRoute: typeof ProtectedRouteWithChildren
  LoginRoute: typeof LoginRoute
}

const rootRouteChildren: RootRouteChildren = {
  ProtectedRoute: ProtectedRouteWithChildren,
  LoginRoute: LoginRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_protected",
        "/login"
      ]
    },
    "/_protected": {
      "filePath": "_protected.tsx",
      "children": [
        "/_protected/admin",
        "/_protected/expenses",
        "/_protected/insights",
        "/_protected/search",
        "/_protected/test",
        "/_protected/",
        "/_protected/payees/$payeeId"
      ]
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/_protected/admin": {
      "filePath": "_protected.admin.tsx",
      "parent": "/_protected"
    },
    "/_protected/expenses": {
      "filePath": "_protected.expenses.tsx",
      "parent": "/_protected"
    },
    "/_protected/insights": {
      "filePath": "_protected.insights.tsx",
      "parent": "/_protected"
    },
    "/_protected/search": {
      "filePath": "_protected.search.tsx",
      "parent": "/_protected"
    },
    "/_protected/test": {
      "filePath": "_protected.test.tsx",
      "parent": "/_protected"
    },
    "/_protected/": {
      "filePath": "_protected.index.tsx",
      "parent": "/_protected"
    },
    "/_protected/payees/$payeeId": {
      "filePath": "_protected.payees.$payeeId.tsx",
      "parent": "/_protected"
    }
  }
}
ROUTE_MANIFEST_END */
